/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * polling API
 * polling API Document
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type { Post } from '../../model';
import { customInstance } from '../../mutator/custom-instance';

/**
 * @summary Î™®Îì† Í≤åÏãúÍ∏Ä Ï°∞Ìöå
 */
export const findAllPosts = (signal?: AbortSignal) => {
  return customInstance<Post[]>({ url: `/v1/posts`, method: 'GET', signal });
};

export const getFindAllPostsQueryKey = () => {
  return [`/v1/posts`] as const;
};

export const getFindAllPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllPosts>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPosts>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFindAllPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllPosts>>> = ({ signal }) =>
    findAllPosts(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllPosts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FindAllPostsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllPosts>>>;
export type FindAllPostsQueryError = unknown;

export function useFindAllPosts<
  TData = Awaited<ReturnType<typeof findAllPosts>>,
  TError = unknown,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPosts>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllPosts>>, TError, TData>,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useFindAllPosts<
  TData = Awaited<ReturnType<typeof findAllPosts>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPosts>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllPosts>>, TError, TData>,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useFindAllPosts<
  TData = Awaited<ReturnType<typeof findAllPosts>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPosts>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Î™®Îì† Í≤åÏãúÍ∏Ä Ï°∞Ìöå
 */

export function useFindAllPosts<
  TData = Awaited<ReturnType<typeof findAllPosts>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPosts>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFindAllPostsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÏÉàÎ°úÏö¥ Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
 */
export const createPost = (post: Post) => {
  return customInstance<Post>({
    url: `/v1/posts`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: post,
  });
};

export const getCreatePostMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPost>>,
    TError,
    { data: Post },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPost>>,
  TError,
  { data: Post },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPost>>, { data: Post }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return createPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreatePostMutationResult = NonNullable<Awaited<ReturnType<typeof createPost>>>;
export type CreatePostMutationBody = Post;
export type CreatePostMutationError = unknown;

/**
 * @summary ÏÉàÎ°úÏö¥ Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
 */
export const useCreatePost = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPost>>,
    TError,
    { data: Post },
    TContext
  >;
}): UseMutationResult<Awaited<ReturnType<typeof createPost>>, TError, { data: Post }, TContext> => {
  const mutationOptions = getCreatePostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getPostById = (postId: number, signal?: AbortSignal) => {
  return customInstance<Post>({ url: `/v1/posts/${postId}`, method: 'GET', signal });
};

export const getGetPostByIdQueryKey = (postId: number) => {
  return [`/v1/posts/${postId}`] as const;
};

export const getGetPostByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPostById>>,
  TError = unknown,
>(
  postId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostById>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostByIdQueryKey(postId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostById>>> = ({ signal }) =>
    getPostById(postId, signal);

  return { queryKey, queryFn, enabled: !!postId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPostById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPostByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPostById>>>;
export type GetPostByIdQueryError = unknown;

export function useGetPostById<TData = Awaited<ReturnType<typeof getPostById>>, TError = unknown>(
  postId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getPostById>>, TError, TData>,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPostById<TData = Awaited<ReturnType<typeof getPostById>>, TError = unknown>(
  postId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getPostById>>, TError, TData>,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPostById<TData = Awaited<ReturnType<typeof getPostById>>, TError = unknown>(
  postId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostById>>, TError, TData>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetPostById<TData = Awaited<ReturnType<typeof getPostById>>, TError = unknown>(
  postId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostById>>, TError, TData>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPostByIdQueryOptions(postId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

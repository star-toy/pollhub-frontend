/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * polling API
 * polling API Document
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  PostCreateRequest,
  PostCreateResponse,
  PostDetailResponse,
  PostListResponse,
} from '../../model';
import { customInstance } from '../../mutator/custom-instance';

/**
 * @summary Í≤åÏãúÍ∏Ä Ï†ÑÏ≤¥ Ï°∞Ìöå - Î©îÏù∏ÌéòÏù¥ÏßÄ Í≤åÏãúÍ∏Ä Î™©Î°ù
 */
export const findAllPostsList = (signal?: AbortSignal) => {
  return customInstance<PostListResponse>({ url: `/v1/posts`, method: 'GET', signal });
};

export const getFindAllPostsListQueryKey = () => {
  return [`/v1/posts`] as const;
};

export const getFindAllPostsListQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllPostsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPostsList>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFindAllPostsListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllPostsList>>> = ({ signal }) =>
    findAllPostsList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllPostsList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FindAllPostsListQueryResult = NonNullable<Awaited<ReturnType<typeof findAllPostsList>>>;
export type FindAllPostsListQueryError = unknown;

export function useFindAllPostsList<
  TData = Awaited<ReturnType<typeof findAllPostsList>>,
  TError = unknown,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPostsList>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllPostsList>>, TError, TData>,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useFindAllPostsList<
  TData = Awaited<ReturnType<typeof findAllPostsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPostsList>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllPostsList>>, TError, TData>,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useFindAllPostsList<
  TData = Awaited<ReturnType<typeof findAllPostsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPostsList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Í≤åÏãúÍ∏Ä Ï†ÑÏ≤¥ Ï°∞Ìöå - Î©îÏù∏ÌéòÏù¥ÏßÄ Í≤åÏãúÍ∏Ä Î™©Î°ù
 */

export function useFindAllPostsList<
  TData = Awaited<ReturnType<typeof findAllPostsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPostsList>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getFindAllPostsListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÏÉàÎ°úÏö¥ Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
 */
export const createPost = (postCreateRequest: PostCreateRequest) => {
  return customInstance<PostCreateResponse>({
    url: `/v1/posts`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: postCreateRequest,
  });
};

export const getCreatePostMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPost>>,
    TError,
    { data: PostCreateRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPost>>,
  TError,
  { data: PostCreateRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPost>>,
    { data: PostCreateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreatePostMutationResult = NonNullable<Awaited<ReturnType<typeof createPost>>>;
export type CreatePostMutationBody = PostCreateRequest;
export type CreatePostMutationError = unknown;

/**
 * @summary ÏÉàÎ°úÏö¥ Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
 */
export const useCreatePost = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPost>>,
    TError,
    { data: PostCreateRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createPost>>,
  TError,
  { data: PostCreateRequest },
  TContext
> => {
  const mutationOptions = getCreatePostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary ÌäπÏ†ï UIDÏùò Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getPostByUid = (postUid: string, signal?: AbortSignal) => {
  return customInstance<PostDetailResponse>({ url: `/v1/posts/${postUid}`, method: 'GET', signal });
};

export const getGetPostByUidQueryKey = (postUid: string) => {
  return [`/v1/posts/${postUid}`] as const;
};

export const getGetPostByUidQueryOptions = <
  TData = Awaited<ReturnType<typeof getPostByUid>>,
  TError = unknown,
>(
  postUid: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostByUid>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostByUidQueryKey(postUid);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostByUid>>> = ({ signal }) =>
    getPostByUid(postUid, signal);

  return { queryKey, queryFn, enabled: !!postUid, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPostByUid>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPostByUidQueryResult = NonNullable<Awaited<ReturnType<typeof getPostByUid>>>;
export type GetPostByUidQueryError = unknown;

export function useGetPostByUid<TData = Awaited<ReturnType<typeof getPostByUid>>, TError = unknown>(
  postUid: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostByUid>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getPostByUid>>, TError, TData>,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPostByUid<TData = Awaited<ReturnType<typeof getPostByUid>>, TError = unknown>(
  postUid: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostByUid>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getPostByUid>>, TError, TData>,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPostByUid<TData = Awaited<ReturnType<typeof getPostByUid>>, TError = unknown>(
  postUid: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostByUid>>, TError, TData>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary ÌäπÏ†ï UIDÏùò Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetPostByUid<TData = Awaited<ReturnType<typeof getPostByUid>>, TError = unknown>(
  postUid: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostByUid>>, TError, TData>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPostByUidQueryOptions(postUid, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

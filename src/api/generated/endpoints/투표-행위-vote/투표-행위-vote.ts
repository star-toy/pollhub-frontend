/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * polling API
 * polling API Document
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type { GetVoteRateParams, OptionVoteRateDTO, SubmitVoteParams } from '../../model';
import { customInstance } from '../../mutator/custom-instance';

export const submitVote = (params: SubmitVoteParams) => {
  return customInstance<string>({ url: `/v1/vote`, method: 'POST', params });
};

export const getSubmitVoteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitVote>>,
    TError,
    { params: SubmitVoteParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof submitVote>>,
  TError,
  { params: SubmitVoteParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof submitVote>>,
    { params: SubmitVoteParams }
  > = (props) => {
    const { params } = props ?? {};

    return submitVote(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type SubmitVoteMutationResult = NonNullable<Awaited<ReturnType<typeof submitVote>>>;

export type SubmitVoteMutationError = unknown;

export const useSubmitVote = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitVote>>,
    TError,
    { params: SubmitVoteParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof submitVote>>,
  TError,
  { params: SubmitVoteParams },
  TContext
> => {
  const mutationOptions = getSubmitVoteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary ÌäπÏ†ï Ìà¨ÌëúÏùò ÏòµÏÖòÎì§ Ìà¨ÌëúÏú® Ï°∞Ìöå
 */
export const getVoteRate = (params: GetVoteRateParams, signal?: AbortSignal) => {
  return customInstance<OptionVoteRateDTO[]>({
    url: `/v1/vote/rate`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetVoteRateQueryKey = (params: GetVoteRateParams) => {
  return [`/v1/vote/rate`, ...(params ? [params] : [])] as const;
};

export const getGetVoteRateQueryOptions = <
  TData = Awaited<ReturnType<typeof getVoteRate>>,
  TError = unknown,
>(
  params: GetVoteRateParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVoteRate>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVoteRateQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVoteRate>>> = ({ signal }) =>
    getVoteRate(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVoteRate>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetVoteRateQueryResult = NonNullable<Awaited<ReturnType<typeof getVoteRate>>>;
export type GetVoteRateQueryError = unknown;

export function useGetVoteRate<TData = Awaited<ReturnType<typeof getVoteRate>>, TError = unknown>(
  params: GetVoteRateParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVoteRate>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getVoteRate>>, TError, TData>,
        'initialData'
      >;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetVoteRate<TData = Awaited<ReturnType<typeof getVoteRate>>, TError = unknown>(
  params: GetVoteRateParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVoteRate>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getVoteRate>>, TError, TData>,
        'initialData'
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetVoteRate<TData = Awaited<ReturnType<typeof getVoteRate>>, TError = unknown>(
  params: GetVoteRateParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVoteRate>>, TError, TData>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary ÌäπÏ†ï Ìà¨ÌëúÏùò ÏòµÏÖòÎì§ Ìà¨ÌëúÏú® Ï°∞Ìöå
 */

export function useGetVoteRate<TData = Awaited<ReturnType<typeof getVoteRate>>, TError = unknown>(
  params: GetVoteRateParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVoteRate>>, TError, TData>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetVoteRateQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * polling API
 * polling API Document
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import type { SubmitVoteParams } from '../../model';
import { customInstance } from '../../mutator/custom-instance';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const submitVote = (
  params: SubmitVoteParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>({ url: `/v1/vote`, method: 'POST', params }, options);
};

export const getSubmitVoteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitVote>>,
    TError,
    { params: SubmitVoteParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof submitVote>>,
  TError,
  { params: SubmitVoteParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof submitVote>>,
    { params: SubmitVoteParams }
  > = (props) => {
    const { params } = props ?? {};

    return submitVote(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SubmitVoteMutationResult = NonNullable<Awaited<ReturnType<typeof submitVote>>>;

export type SubmitVoteMutationError = unknown;

export const useSubmitVote = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof submitVote>>,
    TError,
    { params: SubmitVoteParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof submitVote>>,
  TError,
  { params: SubmitVoteParams },
  TContext
> => {
  const mutationOptions = getSubmitVoteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * polling API
 * polling API Document
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Poll
} from '../../model'
import { customInstance } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Ìà¨Ìëú ÏàòÏ†ï
 */
export const updatePoll = (
    pollId: number,
    poll: Poll,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Poll>(
      {url: `/v1/polls/${pollId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: poll
    },
      options);
    }
  


export const getUpdatePollMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePoll>>, TError,{pollId: number;data: Poll}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePoll>>, TError,{pollId: number;data: Poll}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePoll>>, {pollId: number;data: Poll}> = (props) => {
          const {pollId,data} = props ?? {};

          return  updatePoll(pollId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePollMutationResult = NonNullable<Awaited<ReturnType<typeof updatePoll>>>
    export type UpdatePollMutationBody = Poll
    export type UpdatePollMutationError = unknown

    /**
 * @summary Ìà¨Ìëú ÏàòÏ†ï
 */
export const useUpdatePoll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePoll>>, TError,{pollId: number;data: Poll}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof updatePoll>>,
        TError,
        {pollId: number;data: Poll},
        TContext
      > => {

      const mutationOptions = getUpdatePollMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Ìà¨Ìëú ÏÇ≠Ï†ú
 */
export const deletePoll = (
    pollId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<string>(
      {url: `/v1/polls/${pollId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletePollMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePoll>>, TError,{pollId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePoll>>, TError,{pollId: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePoll>>, {pollId: number}> = (props) => {
          const {pollId} = props ?? {};

          return  deletePoll(pollId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePollMutationResult = NonNullable<Awaited<ReturnType<typeof deletePoll>>>
    
    export type DeletePollMutationError = unknown

    /**
 * @summary Ìà¨Ìëú ÏÇ≠Ï†ú
 */
export const useDeletePoll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePoll>>, TError,{pollId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deletePoll>>,
        TError,
        {pollId: number},
        TContext
      > => {

      const mutationOptions = getDeletePollMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Ìà¨Ìëú Ï†ÑÏ≤¥ Ï°∞Ìöå
 */
export const findAllPolls = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Poll[]>(
      {url: `/v1/polls`, method: 'GET', signal
    },
      options);
    }
  

export const getFindAllPollsQueryKey = () => {
    return [`/v1/polls`] as const;
    }

    
export const getFindAllPollsQueryOptions = <TData = Awaited<ReturnType<typeof findAllPolls>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPolls>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllPollsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllPolls>>> = ({ signal }) => findAllPolls(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllPolls>>, TError, TData> & { queryKey: QueryKey }
}

export type FindAllPollsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllPolls>>>
export type FindAllPollsQueryError = unknown


export function useFindAllPolls<TData = Awaited<ReturnType<typeof findAllPolls>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPolls>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllPolls>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useFindAllPolls<TData = Awaited<ReturnType<typeof findAllPolls>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPolls>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllPolls>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useFindAllPolls<TData = Awaited<ReturnType<typeof findAllPolls>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPolls>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Ìà¨Ìëú Ï†ÑÏ≤¥ Ï°∞Ìöå
 */

export function useFindAllPolls<TData = Awaited<ReturnType<typeof findAllPolls>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPolls>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindAllPollsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÏÉàÎ°úÏö¥ Ìà¨Ìëú ÏÉùÏÑ±
 */
export const createPoll = (
    poll: Poll,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Poll>(
      {url: `/v1/polls`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: poll
    },
      options);
    }
  


export const getCreatePollMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPoll>>, TError,{data: Poll}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createPoll>>, TError,{data: Poll}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPoll>>, {data: Poll}> = (props) => {
          const {data} = props ?? {};

          return  createPoll(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePollMutationResult = NonNullable<Awaited<ReturnType<typeof createPoll>>>
    export type CreatePollMutationBody = Poll
    export type CreatePollMutationError = unknown

    /**
 * @summary ÏÉàÎ°úÏö¥ Ìà¨Ìëú ÏÉùÏÑ±
 */
export const useCreatePoll = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPoll>>, TError,{data: Poll}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createPoll>>,
        TError,
        {data: Poll},
        TContext
      > => {

      const mutationOptions = getCreatePollMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
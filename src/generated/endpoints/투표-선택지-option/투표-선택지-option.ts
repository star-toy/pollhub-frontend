/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * polling API
 * polling API Document
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  PollOption
} from '../../model'
import { customInstance } from '../../mutator/custom-instance';



/**
 * @summary ÌäπÏ†ï Ìà¨Ìëú ÏòµÏÖò Ï°∞Ìöå
 */
export const findOptionById = (
    optionId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PollOption>(
      {url: `/v1/options/${optionId}`, method: 'GET', signal
    },
      );
    }
  

export const getFindOptionByIdQueryKey = (optionId: number,) => {
    return [`/v1/options/${optionId}`] as const;
    }

    
export const getFindOptionByIdQueryOptions = <TData = Awaited<ReturnType<typeof findOptionById>>, TError = unknown>(optionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findOptionById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindOptionByIdQueryKey(optionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findOptionById>>> = ({ signal }) => findOptionById(optionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(optionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findOptionById>>, TError, TData> & { queryKey: QueryKey }
}

export type FindOptionByIdQueryResult = NonNullable<Awaited<ReturnType<typeof findOptionById>>>
export type FindOptionByIdQueryError = unknown


export function useFindOptionById<TData = Awaited<ReturnType<typeof findOptionById>>, TError = unknown>(
 optionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findOptionById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findOptionById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useFindOptionById<TData = Awaited<ReturnType<typeof findOptionById>>, TError = unknown>(
 optionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findOptionById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findOptionById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useFindOptionById<TData = Awaited<ReturnType<typeof findOptionById>>, TError = unknown>(
 optionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findOptionById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌäπÏ†ï Ìà¨Ìëú ÏòµÏÖò Ï°∞Ìöå
 */

export function useFindOptionById<TData = Awaited<ReturnType<typeof findOptionById>>, TError = unknown>(
 optionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findOptionById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindOptionByIdQueryOptions(optionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÌäπÏ†ï Ìà¨Ìëú ÏòµÏÖò ÏàòÏ†ï
 */
export const updateOption = (
    optionId: number,
    pollOption: PollOption,
 ) => {
      
      
      return customInstance<PollOption>(
      {url: `/v1/options/${optionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: pollOption
    },
      );
    }
  


export const getUpdateOptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOption>>, TError,{optionId: number;data: PollOption}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateOption>>, TError,{optionId: number;data: PollOption}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOption>>, {optionId: number;data: PollOption}> = (props) => {
          const {optionId,data} = props ?? {};

          return  updateOption(optionId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOptionMutationResult = NonNullable<Awaited<ReturnType<typeof updateOption>>>
    export type UpdateOptionMutationBody = PollOption
    export type UpdateOptionMutationError = unknown

    /**
 * @summary ÌäπÏ†ï Ìà¨Ìëú ÏòµÏÖò ÏàòÏ†ï
 */
export const useUpdateOption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOption>>, TError,{optionId: number;data: PollOption}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateOption>>,
        TError,
        {optionId: number;data: PollOption},
        TContext
      > => {

      const mutationOptions = getUpdateOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary ÌäπÏ†ï Ìà¨Ìëú ÏòµÏÖò ÏÇ≠Ï†ú
 */
export const deleteOption = (
    optionId: number,
 ) => {
      
      
      return customInstance<string>(
      {url: `/v1/options/${optionId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteOptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOption>>, TError,{optionId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteOption>>, TError,{optionId: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOption>>, {optionId: number}> = (props) => {
          const {optionId} = props ?? {};

          return  deleteOption(optionId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOptionMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOption>>>
    
    export type DeleteOptionMutationError = unknown

    /**
 * @summary ÌäπÏ†ï Ìà¨Ìëú ÏòµÏÖò ÏÇ≠Ï†ú
 */
export const useDeleteOption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOption>>, TError,{optionId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOption>>,
        TError,
        {optionId: number},
        TContext
      > => {

      const mutationOptions = getDeleteOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary ÏÉàÎ°úÏö¥ Ìà¨Ìëú ÏòµÏÖò ÏÉùÏÑ±
 */
export const createOption = (
    pollOption: PollOption,
 ) => {
      
      
      return customInstance<PollOption>(
      {url: `/v1/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pollOption
    },
      );
    }
  


export const getCreateOptionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOption>>, TError,{data: PollOption}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createOption>>, TError,{data: PollOption}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOption>>, {data: PollOption}> = (props) => {
          const {data} = props ?? {};

          return  createOption(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOptionMutationResult = NonNullable<Awaited<ReturnType<typeof createOption>>>
    export type CreateOptionMutationBody = PollOption
    export type CreateOptionMutationError = unknown

    /**
 * @summary ÏÉàÎ°úÏö¥ Ìà¨Ìëú ÏòµÏÖò ÏÉùÏÑ±
 */
export const useCreateOption = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOption>>, TError,{data: PollOption}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createOption>>,
        TError,
        {data: PollOption},
        TContext
      > => {

      const mutationOptions = getCreateOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary ÌäπÏ†ï poll_idÏóê Ìï¥ÎãπÌïòÎäî Ìà¨Ìëú ÏòµÏÖò Ï†ÑÏ≤¥ Ï°∞Ìöå
 */
export const findByPollId = (
    pollId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PollOption[]>(
      {url: `/v1/options/poll/${pollId}`, method: 'GET', signal
    },
      );
    }
  

export const getFindByPollIdQueryKey = (pollId: number,) => {
    return [`/v1/options/poll/${pollId}`] as const;
    }

    
export const getFindByPollIdQueryOptions = <TData = Awaited<ReturnType<typeof findByPollId>>, TError = unknown>(pollId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByPollId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByPollIdQueryKey(pollId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByPollId>>> = ({ signal }) => findByPollId(pollId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(pollId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findByPollId>>, TError, TData> & { queryKey: QueryKey }
}

export type FindByPollIdQueryResult = NonNullable<Awaited<ReturnType<typeof findByPollId>>>
export type FindByPollIdQueryError = unknown


export function useFindByPollId<TData = Awaited<ReturnType<typeof findByPollId>>, TError = unknown>(
 pollId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByPollId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByPollId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useFindByPollId<TData = Awaited<ReturnType<typeof findByPollId>>, TError = unknown>(
 pollId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByPollId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByPollId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useFindByPollId<TData = Awaited<ReturnType<typeof findByPollId>>, TError = unknown>(
 pollId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByPollId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌäπÏ†ï poll_idÏóê Ìï¥ÎãπÌïòÎäî Ìà¨Ìëú ÏòµÏÖò Ï†ÑÏ≤¥ Ï°∞Ìöå
 */

export function useFindByPollId<TData = Awaited<ReturnType<typeof findByPollId>>, TError = unknown>(
 pollId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByPollId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindByPollIdQueryOptions(pollId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



